#!/bin/bash

# Usage function
usage() {
  echo "Usage: $0 <target_ip>"
  exit 1
}

# Check if the target IP is provided as a command-line argument
if [ $# -ne 1 ]; then
  usage
fi

# Get the target IP from the command-line argument
target_ip=$1

# Output directory to save the logs
output_dir="pentest_logs"
mkdir -p "$output_dir"

# Function to handle errors and save logs with timestamps
run_cmd() {
  command="$1"
  log_file="$2"
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Running: $command" >> "$log_file"
  if ! eval "$command" >> "$log_file" 2>&1; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Error: Failed to run '$command'" >> "$log_file"
  fi
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Completed: $command" >> "$log_file"
}

# Nessus Vulnerability Scanner
nessus_scan() {
  log_file="$output_dir/nessus-scan.txt"
  nessus_cmd="nessus -T HTML -r $output_dir/Nessus-Report.html $target_ip"
  run_cmd "$nessus_cmd" "$log_file"
}

# nmap
nmap_scan() {
  log_file="$output_dir/nmap-scan.txt"
  nmap_cmd="nmap -T4 -A -v -oN $log_file $target_ip"
  run_cmd "$nmap_cmd" "$log_file"
}

# Nikto
nikto_scan() {
  log_file="$output_dir/nikto-scan.txt"
  nikto_cmd="nikto -h $target_ip"
  run_cmd "$nikto_cmd" "$log_file"
}

# Dirbuster / Dirb / Dirsearch
dir_scan() {
  log_file="$output_dir/dir-scan.txt"
  dirbuster_cmd="dirbuster -u http://$target_ip -l dirbuster_medium.txt -r -z -e php"
  dirb_cmd="dirb http://$target_ip /usr/share/dirb/wordlists/common.txt"
  dirsearch_cmd="python3 dirsearch.py -u http://$target_ip -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt"

  run_cmd "$dirbuster_cmd" "$log_file" &
  run_cmd "$dirb_cmd" "$log_file" &
  run_cmd "$dirsearch_cmd" "$log_file" &
  wait
}

# sqlmap
sqlmap_scan() {
  log_file="$output_dir/sqlmap-scan.txt"
  sqlmap_cmd="sqlmap -u 'http://$target_ip/index.php?id=1' --batch"
  run_cmd "$sqlmap_cmd" "$log_file"
}

# BeEF
beef_start() {
  log_file="$output_dir/beef-log.txt"
  beef_cmd="beef-xss"
  run_cmd "$beef_cmd" "$log_file"
}

# Metasploit
metasploit_start() {
  log_file="$output_dir/metasploit-log.txt"
  metasploit_cmd="msfconsole"
  run_cmd "$metasploit_cmd" "$log_file"
}

# Qualys SSL Scanner
qualys_scan() {
  log_file="$output_dir/qualys-scan.txt"
  qualys_cmd="sslyze --regular $target_ip"
  run_cmd "$qualys_cmd" "$log_file"
}

# BuiltWith / whatweb
builtwith_scan() {
  log_file="$output_dir/builtwith-scan.txt"
  builtwith_cmd="whatweb -v http://$target_ip"
  run_cmd "$builtwith_cmd" "$log_file"
}

# Run the scans and save the logs using parallel processing
run_parallel() {
  echo "Starting security scans..."
  
  # Scans that can run independently in parallel
  nessus_scan &
  nmap_scan &
  nikto_scan &
  dir_scan &
  wait
  
  # Scans that should run sequentially
  sqlmap_scan
  beef_start
  metasploit_start
  qualys_scan
  builtwith_scan
}

# Redirect output to /dev/null for faster execution of independent scans
run_parallel > /dev/null 2>&1 &

# Show progress while waiting for scans to complete
progress_pid=$!
progress_interval=0.5
echo "Progress: "
while kill -0 "$progress_pid" >/dev/null 2>&1; do
  echo -n "#"
  sleep "$progress_interval"
done
echo " Done"

# Save the script to a compiled, obfuscated file
shc -f "$0" -o pentest_script

# Perform vulnerability scanning on the script
grep -rE '(eval|shc)' "$0" > bug.txt

echo "All scans completed. Results saved in the $output_dir directory."
#!/bin/bash

# Usage function
usage() {
  echo "Usage: $0 <target_ip>"
  exit 1
}

# Check if the target IP is provided as a command-line argument
if [ $# -ne 1 ]; then
  usage
fi

# Get the target IP from the command-line argument
target_ip=$1

# Output directory to save the logs
output_dir="pentest_logs"
mkdir -p "$output_dir"

# Function to handle errors and save logs with timestamps
run_cmd() {
  command="$1"
  log_file="$2"
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Running: $command" >> "$log_file"
  if ! eval "$command" >> "$log_file" 2>&1; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Error: Failed to run '$command'" >> "$log_file"
  fi
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Completed: $command" >> "$log_file"
}

# Nessus Vulnerability Scanner
nessus_scan() {
  log_file="$output_dir/nessus-scan.txt"
  nessus_cmd="nessus -T HTML -r $output_dir/Nessus-Report.html $target_ip"
  run_cmd "$nessus_cmd" "$log_file"
}

# nmap
nmap_scan() {
  log_file="$output_dir/nmap-scan.txt"
  nmap_cmd="nmap -T4 -A -v -oN $log_file $target_ip"
  run_cmd "$nmap_cmd" "$log_file"
}

# Nikto
nikto_scan() {
  log_file="$output_dir/nikto-scan.txt"
  nikto_cmd="nikto -h $target_ip"
  run_cmd "$nikto_cmd" "$log_file"
}

# Dirbuster / Dirb / Dirsearch
dir_scan() {
  log_file="$output_dir/dir-scan.txt"
  dirbuster_cmd="dirbuster -u http://$target_ip -l dirbuster_medium.txt -r -z -e php"
  dirb_cmd="dirb http://$target_ip /usr/share/dirb/wordlists/common.txt"
  dirsearch_cmd="python3 dirsearch.py -u http://$target_ip -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt"

  run_cmd "$dirbuster_cmd" "$log_file" &
  run_cmd "$dirb_cmd" "$log_file" &
  run_cmd "$dirsearch_cmd" "$log_file" &
  wait
}

# sqlmap
sqlmap_scan() {
  log_file="$output_dir/sqlmap-scan.txt"
  sqlmap_cmd="sqlmap -u 'http://$target_ip/index.php?id=1' --batch"
  run_cmd "$sqlmap_cmd" "$log_file"
}

# BeEF
beef_start() {
  log_file="$output_dir/beef-log.txt"
  beef_cmd="beef-xss"
  run_cmd "$beef_cmd" "$log_file"
}

# Metasploit
metasploit_start() {
  log_file="$output_dir/metasploit-log.txt"
  metasploit_cmd="msfconsole"
  run_cmd "$metasploit_cmd" "$log_file"
}

# Qualys SSL Scanner
qualys_scan() {
  log_file="$output_dir/qualys-scan.txt"
  qualys_cmd="sslyze --regular $target_ip"
  run_cmd "$qualys_cmd" "$log_file"
}

# BuiltWith / whatweb
builtwith_scan() {
  log_file="$output_dir/builtwith-scan.txt"
  builtwith_cmd="whatweb -v http://$target_ip"
  run_cmd "$builtwith_cmd" "$log_file"
}

# Run the scans and save the logs using parallel processing
run_parallel() {
  echo "Starting security scans..."
  
  # Scans that can run independently in parallel
  nessus_scan &
  nmap_scan &
  nikto_scan &
  dir_scan &
  wait
  
  # Scans that should run sequentially
  sqlmap_scan
  beef_start
  metasploit_start
  qualys_scan
  builtwith_scan
}

# Redirect output to /dev/null for faster execution of independent scans
run_parallel > /dev/null 2>&1 &

# Show progress while waiting for scans to complete
progress_pid=$!
progress_interval=0.5
echo "Progress: "
while kill -0 "$progress_pid" >/dev/null 2>&1; do
  echo -n "#"
  sleep "$progress_interval"
done
echo " Done"

# Save the script to a compiled, obfuscated file
shc -f "$0" -o pentest_script

# Perform vulnerability scanning on the script
grep -rE '(eval|shc)' "$0" > bug.txt

echo "All scans completed. Results saved in the $output_dir directory."

